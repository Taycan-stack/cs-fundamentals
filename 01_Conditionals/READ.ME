좋아요 😊
그럼 **CS550 두 번째 파이썬 강의(Lecture 1: Conditionals)**를 과외식으로 차근차근 정리하면서 같이 공부해볼게요.
오늘의 핵심 주제는 **조건문(Conditionals)** 이에요 — 프로그램이 "조건에 따라 다르게 행동"하도록 만드는 방법이에요.

---

## 🧭 1. Conditionals란?

조건문은 프로그램이 **“어떤 조건이 참(True)이면 이렇게, 거짓(False)이면 저렇게”** 행동하도록 합니다.
즉, 프로그램이 **결정(decision)** 을 내릴 수 있게 해주는 도구예요.

예를 들어,

> “비가 오면 우산을 가져가고, 안 오면 그냥 나간다.”

이건 자연어 버전의 조건문이고, 파이썬에서는 이렇게 표현하죠:

```python
if raining:
    print("Take an umbrella")
else:
    print("Go outside")
```

---

## 🔢 2. 비교 연산자 (Comparison Operators)

| 기호   | 의미     | 예시     | 결과    |
| ---- | ------ | ------ | ----- |
| `<`  | 작다     | 3 < 5  | True  |
| `>`  | 크다     | 5 > 3  | True  |
| `<=` | 작거나 같다 | 3 <= 3 | True  |
| `>=` | 크거나 같다 | 4 >= 5 | False |
| `==` | 같다     | 5 == 5 | True  |
| `!=` | 다르다    | 5 != 4 | True  |

⚠️ **주의:**
`=` (하나짜리)는 **값을 할당(assign)** 하는 것이고,
`==` (두 개)는 **값을 비교(compare)** 하는 것입니다.

---

## 💡 3. if 문 기본

```python
x = int(input("What's x? "))
y = int(input("What's y? "))

if x < y:
    print("x is less than y")
```

✅ **해석:**
입력받은 `x`와 `y`를 비교해서 `x`가 `y`보다 작으면 문장을 출력합니다.

---

## 🔁 4. Control Flow (제어 흐름), elif, else

처음엔 이렇게 작성할 수 있겠죠:

```python
if x < y:
    print("x is less than y")
if x > y:
    print("x is greater than y")
if x == y:
    print("x is equal to y")
```

하지만 이건 **세 개의 if문이 모두 따로 작동**하니까
비효율적이에요.

그래서 이렇게 개선합니다 👇

```python
if x < y:
    print("x is less than y")
elif x > y:
    print("x is greater than y")
else:
    print("x is equal to y")
```

이제 프로그램은 **위에서부터 순차적으로 검사하다가, 처음 True를 만나면 거기서 멈춥니다.**

---

## ⚙️ 5. `or` (또는)

`or`는 “둘 중 하나라도 참이면 전체가 참”입니다.

```python
if x < y or x > y:
    print("x is not equal to y")
else:
    print("x is equal to y")
```

→ `or`을 없애고 더 깔끔하게 쓸 수도 있습니다:

```python
if x != y:
    print("x is not equal to y")
else:
    print("x is equal to y")
```

---

## 🔗 6. `and` (그리고)

`and`는 “둘 다 참일 때만 참”입니다.
예: 점수에 따라 학점을 매기는 프로그램

```python
score = int(input("Score: "))

if score >= 90 and score <= 100:
    print("Grade: A")
elif score >= 80 and score < 90:
    print("Grade: B")
# ...
```

하지만 Python에서는 더 “파이썬답게” 이렇게 쓸 수 있어요 👇

```python
if 90 <= score <= 100:
    print("Grade: A")
```

💡 **더 효율적인 버전:**

```python
if score >= 90:
    print("Grade: A")
elif score >= 80:
    print("Grade: B")
elif score >= 70:
    print("Grade: C")
elif score >= 60:
    print("Grade: D")
else:
    print("Grade: F")
```

---

## 🔢 7. Modulo `%` (나머지 연산)

짝수/홀수(Parity)를 판단할 때 사용합니다.

```python
x = int(input("What's x? "))

if x % 2 == 0:
    print("Even")
else:
    print("Odd")
```

---

## 🧩 8. 함수로 만들기 (Creating Our Own Function)

```python
def main():
    x = int(input("What's x? "))
    if is_even(x):
        print("Even")
    else:
        print("Odd")

def is_even(n):
    if n % 2 == 0:
        return True
    else:
        return False

main()
```

→ `is_even` 함수는 **True / False**를 반환합니다.

---

## 🐍 9. Pythonic 코드

“Pythonic”이란,
다른 언어보다 **간결하고 읽기 쉬운 코드**를 의미합니다.

점점 더 파이썬스럽게 고쳐볼까요?

```python
def is_even(n):
    return True if n % 2 == 0 else False
```

→ 더 간결하게는 이렇게!

```python
def is_even(n):
    return n % 2 == 0
```

---

## 🪄 10. `match` 문 (Python 3.10+)

if/elif 대신 `match-case` 문을 사용할 수 있습니다.

```python
name = input("What's your name? ")

match name:
    case "Harry" | "Hermione" | "Ron":
        print("Gryffindor")
    case "Draco":
        print("Slytherin")
    case _:
        print("Who?")
```

`_`는 **else 역할**을 합니다 (모든 나머지 경우).

---

## 🧠 정리 (Summing Up)

오늘 배운 것들:

* `if`, `elif`, `else`
* `and`, `or`, `!=`, `==`
* `%` (modulo, 짝수/홀수 판별)
* 함수 정의와 반환 (`def`, `return`)
* Pythonic한 표현
* `match` 문으로 간결한 분기 처리

---

원한다면 다음 단계로:

* 🧪 실습 문제 (예: 성적 판별기, 짝수/홀수 판별기, 이름 매칭 등)
* 💬 코드 한 줄씩 설명 (라인별 주석 달기)
* 🧠 퀴즈 (참/거짓 문제로 복습)

지금은 어떤 방식으로 진행할까?
👉 실습 문제로 직접 해볼래요, 아니면 코드 예시를 하나씩 자세히 설명해드릴까요?
